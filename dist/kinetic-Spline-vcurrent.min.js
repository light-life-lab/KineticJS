(function(){Kinetic.Spline=function(e){this._initSpline(e)},Kinetic.Spline._getControlPoints=function(e,t,n,r){var i=e.x,s=e.y,o=t.x,u=t.y,a=n.x,f=n.y,l=Math.sqrt(Math.pow(o-i,2)+Math.pow(u-s,2)),c=Math.sqrt(Math.pow(a-o,2)+Math.pow(f-u,2)),h=r*l/(l+c),p=r*c/(l+c),d=o-h*(a-i),v=u-h*(f-s),m=o+p*(a-i),g=u+p*(f-s);return[{x:d,y:v},{x:m,y:g}]},Kinetic.Spline.prototype={_initSpline:function(e){this.setDefaultAttrs({tension:1}),Kinetic.Line.call(this,e),this.shapeType="Spline"},drawFunc:function(e){var t=this.getPoints(),n=t.length,r=e.getContext(),i=this.getTension();r.beginPath(),r.moveTo(t[0].x,t[0].y);if(i!==0&&n>2){var s=this.allPoints,o=s.length;r.quadraticCurveTo(s[0].x,s[0].y,s[1].x,s[1].y);var u=2;while(u<o-1)r.bezierCurveTo(s[u].x,s[u++].y,s[u].x,s[u++].y,s[u].x,s[u++].y);r.quadraticCurveTo(s[o-1].x,s[o-1].y,t[n-1].x,t[n-1].y)}else for(var u=1;u<n;u++){var a=t[u];r.lineTo(a.x,a.y)}e.stroke(this)},setPoints:function(e){Kinetic.Line.prototype.setPoints.call(this,e),this._setAllPoints()},setTension:function(e){this.setAttr("tension",e),this._setAllPoints()},_setAllPoints:function(){var e=this.getPoints(),t=e.length,n=this.getTension(),r=[];for(var i=1;i<t-1;i++){var s=Kinetic.Spline._getControlPoints(e[i-1],e[i],e[i+1],n);r.push(s[0]),r.push(e[i]),r.push(s[1])}this.allPoints=r}},Kinetic.Global.extend(Kinetic.Spline,Kinetic.Line),Kinetic.Node.addGetters(Kinetic.Spline,["tension"])})();
